"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactRegistryClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta2/artifact_registry_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./artifact_registry_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 *  The Artifact Registry API service.
 *
 *  Artifact Registry is an artifact management system for storing artifacts
 *  from different package management systems.
 *
 *  The resources managed by this API are:
 *
 *  * Repositories, which group packages and their data.
 *  * Packages, which group versions and their tags.
 *  * Versions, which are specific forms of a package.
 *  * Tags, which represent alternative names for versions.
 *  * Files, which contain content and are optionally associated with a Package
 *    or Version.
 * @class
 * @memberof v1beta2
 */
class ArtifactRegistryClient {
    /**
     * Construct an instance of ArtifactRegistryClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            aptArtifactPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}/aptArtifacts/{apt_artifact}'),
            filePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}/files/{file}'),
            projectSettingsPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/projectSettings'),
            repositoryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}'),
            tagPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}/packages/{package}/tags/{tag}'),
            versionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}/packages/{package}/versions/{version}'),
            yumArtifactPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/repositories/{repository}/yumArtifacts/{yum_artifact}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listRepositories: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'repositories'),
            listPackages: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'packages'),
            listVersions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'versions'),
            listFiles: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'files'),
            listTags: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tags'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const importAptArtifactsResponse = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsResponse');
        const importAptArtifactsMetadata = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.ImportAptArtifactsMetadata');
        const importYumArtifactsResponse = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsResponse');
        const importYumArtifactsMetadata = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.ImportYumArtifactsMetadata');
        const createRepositoryResponse = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.Repository');
        const createRepositoryMetadata = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.OperationMetadata');
        const deleteRepositoryResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteRepositoryMetadata = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.OperationMetadata');
        const deletePackageResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deletePackageMetadata = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.OperationMetadata');
        const deleteVersionResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteVersionMetadata = protoFilesRoot.lookup('.google.devtools.artifactregistry.v1beta2.OperationMetadata');
        this.descriptors.longrunning = {
            importAptArtifacts: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importAptArtifactsResponse.decode.bind(importAptArtifactsResponse), importAptArtifactsMetadata.decode.bind(importAptArtifactsMetadata)),
            importYumArtifacts: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importYumArtifactsResponse.decode.bind(importYumArtifactsResponse), importYumArtifactsMetadata.decode.bind(importYumArtifactsMetadata)),
            createRepository: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createRepositoryResponse.decode.bind(createRepositoryResponse), createRepositoryMetadata.decode.bind(createRepositoryMetadata)),
            deleteRepository: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteRepositoryResponse.decode.bind(deleteRepositoryResponse), deleteRepositoryMetadata.decode.bind(deleteRepositoryMetadata)),
            deletePackage: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deletePackageResponse.decode.bind(deletePackageResponse), deletePackageMetadata.decode.bind(deletePackageMetadata)),
            deleteVersion: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteVersionResponse.decode.bind(deleteVersionResponse), deleteVersionMetadata.decode.bind(deleteVersionMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.devtools.artifactregistry.v1beta2.ArtifactRegistry', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.artifactRegistryStub) {
            return this.artifactRegistryStub;
        }
        // Put together the "service stub" for
        // google.devtools.artifactregistry.v1beta2.ArtifactRegistry.
        this.artifactRegistryStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.devtools.artifactregistry.v1beta2.ArtifactRegistry')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.devtools.artifactregistry.v1beta2
                    .ArtifactRegistry, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const artifactRegistryStubMethods = [
            'importAptArtifacts',
            'importYumArtifacts',
            'listRepositories',
            'getRepository',
            'createRepository',
            'updateRepository',
            'deleteRepository',
            'listPackages',
            'getPackage',
            'deletePackage',
            'listVersions',
            'getVersion',
            'deleteVersion',
            'listFiles',
            'getFile',
            'listTags',
            'getTag',
            'createTag',
            'updateTag',
            'deleteTag',
            'setIamPolicy',
            'getIamPolicy',
            'testIamPermissions',
            'getProjectSettings',
            'updateProjectSettings',
        ];
        for (const methodName of artifactRegistryStubMethods) {
            const callPromise = this.artifactRegistryStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.artifactRegistryStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'artifactregistry.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'artifactregistry.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/cloud-platform.read-only',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getRepository(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getRepository(request, options, callback);
    }
    updateRepository(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'repository.name': request.repository.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateRepository(request, options, callback);
    }
    getPackage(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getPackage(request, options, callback);
    }
    getVersion(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getVersion(request, options, callback);
    }
    getFile(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getFile(request, options, callback);
    }
    getTag(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getTag(request, options, callback);
    }
    createTag(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createTag(request, options, callback);
    }
    updateTag(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'tag.name': request.tag.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateTag(request, options, callback);
    }
    deleteTag(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteTag(request, options, callback);
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                resource: request.resource || '',
            });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                resource: request.resource || '',
            });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                resource: request.resource || '',
            });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
    }
    getProjectSettings(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getProjectSettings(request, options, callback);
    }
    updateProjectSettings(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'project_settings.name': request.projectSettings.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateProjectSettings(request, options, callback);
    }
    importAptArtifacts(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.importAptArtifacts(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importAptArtifacts()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.import_apt_artifacts.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ImportAptArtifacts_async
     */
    async checkImportAptArtifactsProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importAptArtifacts, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    importYumArtifacts(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.importYumArtifacts(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `importYumArtifacts()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.import_yum_artifacts.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ImportYumArtifacts_async
     */
    async checkImportYumArtifactsProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importYumArtifacts, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createRepository(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createRepository(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createRepository()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.create_repository.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_CreateRepository_async
     */
    async checkCreateRepositoryProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createRepository, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteRepository(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteRepository(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteRepository()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_repository.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteRepository_async
     */
    async checkDeleteRepositoryProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteRepository, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deletePackage(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deletePackage(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deletePackage()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_package.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeletePackage_async
     */
    async checkDeletePackageProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deletePackage, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteVersion(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteVersion(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteVersion()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.delete_version.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_DeleteVersion_async
     */
    async checkDeleteVersionProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteVersion, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listRepositories(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listRepositories(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the parent resource whose repositories will be listed.
     * @param {number} request.pageSize
     *   The maximum number of repositories to return. Maximum page size is 1,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRepositoriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listRepositoriesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listRepositories'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRepositories.createStream(this.innerApiCalls.listRepositories, request, callSettings);
    }
    /**
     * Equivalent to `listRepositories`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The name of the parent resource whose repositories will be listed.
     * @param {number} request.pageSize
     *   The maximum number of repositories to return. Maximum page size is 1,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Repository]{@link google.devtools.artifactregistry.v1beta2.Repository}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_repositories.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListRepositories_async
     */
    listRepositoriesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listRepositories'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRepositories.asyncIterate(this.innerApiCalls['listRepositories'], request, callSettings);
    }
    listPackages(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listPackages(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the parent resource whose packages will be listed.
     * @param {number} request.pageSize
     *   The maximum number of packages to return.
     *   Maximum page size is 10,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Package]{@link google.devtools.artifactregistry.v1beta2.Package} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPackagesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listPackagesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listPackages'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPackages.createStream(this.innerApiCalls.listPackages, request, callSettings);
    }
    /**
     * Equivalent to `listPackages`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the parent resource whose packages will be listed.
     * @param {number} request.pageSize
     *   The maximum number of packages to return.
     *   Maximum page size is 10,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Package]{@link google.devtools.artifactregistry.v1beta2.Package}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_packages.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListPackages_async
     */
    listPackagesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listPackages'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPackages.asyncIterate(this.innerApiCalls['listPackages'], request, callSettings);
    }
    listVersions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listVersions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the parent resource whose versions will be listed.
     * @param {number} request.pageSize
     *   The maximum number of versions to return. Maximum page size is 1,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {google.devtools.artifactregistry.v1beta2.VersionView} request.view
     *   The view that should be returned in the response.
     * @param {string} [request.orderBy]
     *   Optional. The field to order the results by.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Version]{@link google.devtools.artifactregistry.v1beta2.Version} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listVersionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listVersionsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listVersions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listVersions.createStream(this.innerApiCalls.listVersions, request, callSettings);
    }
    /**
     * Equivalent to `listVersions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the parent resource whose versions will be listed.
     * @param {number} request.pageSize
     *   The maximum number of versions to return. Maximum page size is 1,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {google.devtools.artifactregistry.v1beta2.VersionView} request.view
     *   The view that should be returned in the response.
     * @param {string} [request.orderBy]
     *   Optional. The field to order the results by.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Version]{@link google.devtools.artifactregistry.v1beta2.Version}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_versions.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListVersions_async
     */
    listVersionsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listVersions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listVersions.asyncIterate(this.innerApiCalls['listVersions'], request, callSettings);
    }
    listFiles(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listFiles(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the repository whose files will be listed. For example:
     *   "projects/p1/locations/us-central1/repositories/repo1
     * @param {string} request.filter
     *   An expression for filtering the results of the request. Filter rules are
     *   case insensitive. The fields eligible for filtering are:
     *
     *     * `name`
     *     * `owner`
     *
     *    An example of using a filter:
     *
     *     * `name="projects/p1/locations/us-central1/repositories/repo1/files/a/b/*"` --> Files with an
     *     ID starting with "a/b/".
     *     * `owner="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"` -->
     *     Files owned by the version `1.0` in package `pkg1`.
     * @param {number} request.pageSize
     *   The maximum number of files to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [File]{@link google.devtools.artifactregistry.v1beta2.File} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listFilesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listFilesStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listFiles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFiles.createStream(this.innerApiCalls.listFiles, request, callSettings);
    }
    /**
     * Equivalent to `listFiles`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the repository whose files will be listed. For example:
     *   "projects/p1/locations/us-central1/repositories/repo1
     * @param {string} request.filter
     *   An expression for filtering the results of the request. Filter rules are
     *   case insensitive. The fields eligible for filtering are:
     *
     *     * `name`
     *     * `owner`
     *
     *    An example of using a filter:
     *
     *     * `name="projects/p1/locations/us-central1/repositories/repo1/files/a/b/*"` --> Files with an
     *     ID starting with "a/b/".
     *     * `owner="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"` -->
     *     Files owned by the version `1.0` in package `pkg1`.
     * @param {number} request.pageSize
     *   The maximum number of files to return.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [File]{@link google.devtools.artifactregistry.v1beta2.File}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_files.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListFiles_async
     */
    listFilesAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listFiles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listFiles.asyncIterate(this.innerApiCalls['listFiles'], request, callSettings);
    }
    listTags(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listTags(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the parent resource whose tags will be listed.
     * @param {string} request.filter
     *   An expression for filtering the results of the request. Filter rules are
     *   case insensitive. The fields eligible for filtering are:
     *
     *     * `version`
     *
     *    An example of using a filter:
     *
     *     * `version="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"`
     *     --> Tags that are applied to the version `1.0` in package `pkg1`.
     * @param {number} request.pageSize
     *   The maximum number of tags to return. Maximum page size is 10,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTagsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listTagsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listTags'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTags.createStream(this.innerApiCalls.listTags, request, callSettings);
    }
    /**
     * Equivalent to `listTags`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The name of the parent resource whose tags will be listed.
     * @param {string} request.filter
     *   An expression for filtering the results of the request. Filter rules are
     *   case insensitive. The fields eligible for filtering are:
     *
     *     * `version`
     *
     *    An example of using a filter:
     *
     *     * `version="projects/p1/locations/us-central1/repositories/repo1/packages/pkg1/versions/1.0"`
     *     --> Tags that are applied to the version `1.0` in package `pkg1`.
     * @param {number} request.pageSize
     *   The maximum number of tags to return. Maximum page size is 10,000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request, if any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Tag]{@link google.devtools.artifactregistry.v1beta2.Tag}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta2/artifact_registry.list_tags.js</caption>
     * region_tag:artifactregistry_v1beta2_generated_ArtifactRegistry_ListTags_async
     */
    listTagsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const defaultCallSettings = this._defaults['listTags'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTags.asyncIterate(this.innerApiCalls['listTags'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified aptArtifact resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @param {string} apt_artifact
     * @returns {string} Resource name string.
     */
    aptArtifactPath(project, location, repository, aptArtifact) {
        return this.pathTemplates.aptArtifactPathTemplate.render({
            project: project,
            location: location,
            repository: repository,
            apt_artifact: aptArtifact,
        });
    }
    /**
     * Parse the project from AptArtifact resource.
     *
     * @param {string} aptArtifactName
     *   A fully-qualified path representing AptArtifact resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAptArtifactName(aptArtifactName) {
        return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
            .project;
    }
    /**
     * Parse the location from AptArtifact resource.
     *
     * @param {string} aptArtifactName
     *   A fully-qualified path representing AptArtifact resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAptArtifactName(aptArtifactName) {
        return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
            .location;
    }
    /**
     * Parse the repository from AptArtifact resource.
     *
     * @param {string} aptArtifactName
     *   A fully-qualified path representing AptArtifact resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromAptArtifactName(aptArtifactName) {
        return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
            .repository;
    }
    /**
     * Parse the apt_artifact from AptArtifact resource.
     *
     * @param {string} aptArtifactName
     *   A fully-qualified path representing AptArtifact resource.
     * @returns {string} A string representing the apt_artifact.
     */
    matchAptArtifactFromAptArtifactName(aptArtifactName) {
        return this.pathTemplates.aptArtifactPathTemplate.match(aptArtifactName)
            .apt_artifact;
    }
    /**
     * Return a fully-qualified file resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @param {string} file
     * @returns {string} Resource name string.
     */
    filePath(project, location, repository, file) {
        return this.pathTemplates.filePathTemplate.render({
            project: project,
            location: location,
            repository: repository,
            file: file,
        });
    }
    /**
     * Parse the project from File resource.
     *
     * @param {string} fileName
     *   A fully-qualified path representing File resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFileName(fileName) {
        return this.pathTemplates.filePathTemplate.match(fileName).project;
    }
    /**
     * Parse the location from File resource.
     *
     * @param {string} fileName
     *   A fully-qualified path representing File resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFileName(fileName) {
        return this.pathTemplates.filePathTemplate.match(fileName).location;
    }
    /**
     * Parse the repository from File resource.
     *
     * @param {string} fileName
     *   A fully-qualified path representing File resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromFileName(fileName) {
        return this.pathTemplates.filePathTemplate.match(fileName).repository;
    }
    /**
     * Parse the file from File resource.
     *
     * @param {string} fileName
     *   A fully-qualified path representing File resource.
     * @returns {string} A string representing the file.
     */
    matchFileFromFileName(fileName) {
        return this.pathTemplates.filePathTemplate.match(fileName).file;
    }
    /**
     * Return a fully-qualified projectSettings resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectSettingsPath(project) {
        return this.pathTemplates.projectSettingsPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from ProjectSettings resource.
     *
     * @param {string} projectSettingsName
     *   A fully-qualified path representing ProjectSettings resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectSettingsName(projectSettingsName) {
        return this.pathTemplates.projectSettingsPathTemplate.match(projectSettingsName).project;
    }
    /**
     * Return a fully-qualified repository resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @returns {string} Resource name string.
     */
    repositoryPath(project, location, repository) {
        return this.pathTemplates.repositoryPathTemplate.render({
            project: project,
            location: location,
            repository: repository,
        });
    }
    /**
     * Parse the project from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .project;
    }
    /**
     * Parse the location from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .location;
    }
    /**
     * Parse the repository from Repository resource.
     *
     * @param {string} repositoryName
     *   A fully-qualified path representing Repository resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromRepositoryName(repositoryName) {
        return this.pathTemplates.repositoryPathTemplate.match(repositoryName)
            .repository;
    }
    /**
     * Return a fully-qualified tag resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @param {string} packageParam
     * @param {string} tag
     * @returns {string} Resource name string.
     */
    tagPath(project, location, repository, packageParam, tag) {
        return this.pathTemplates.tagPathTemplate.render({
            project: project,
            location: location,
            repository: repository,
            package: packageParam,
            tag: tag,
        });
    }
    /**
     * Parse the project from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).project;
    }
    /**
     * Parse the location from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).location;
    }
    /**
     * Parse the repository from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).repository;
    }
    /**
     * Parse the package from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the package.
     */
    matchPackageFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).package;
    }
    /**
     * Parse the tag from Tag resource.
     *
     * @param {string} tagName
     *   A fully-qualified path representing Tag resource.
     * @returns {string} A string representing the tag.
     */
    matchTagFromTagName(tagName) {
        return this.pathTemplates.tagPathTemplate.match(tagName).tag;
    }
    /**
     * Return a fully-qualified version resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @param {string} packageParam
     * @param {string} version
     * @returns {string} Resource name string.
     */
    versionPath(project, location, repository, packageParam, version) {
        return this.pathTemplates.versionPathTemplate.render({
            project: project,
            location: location,
            repository: repository,
            package: packageParam,
            version: version,
        });
    }
    /**
     * Parse the project from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).project;
    }
    /**
     * Parse the location from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).location;
    }
    /**
     * Parse the repository from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).repository;
    }
    /**
     * Parse the package from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the package.
     */
    matchPackageFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).package;
    }
    /**
     * Parse the version from Version resource.
     *
     * @param {string} versionName
     *   A fully-qualified path representing Version resource.
     * @returns {string} A string representing the version.
     */
    matchVersionFromVersionName(versionName) {
        return this.pathTemplates.versionPathTemplate.match(versionName).version;
    }
    /**
     * Return a fully-qualified yumArtifact resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} repository
     * @param {string} yum_artifact
     * @returns {string} Resource name string.
     */
    yumArtifactPath(project, location, repository, yumArtifact) {
        return this.pathTemplates.yumArtifactPathTemplate.render({
            project: project,
            location: location,
            repository: repository,
            yum_artifact: yumArtifact,
        });
    }
    /**
     * Parse the project from YumArtifact resource.
     *
     * @param {string} yumArtifactName
     *   A fully-qualified path representing YumArtifact resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromYumArtifactName(yumArtifactName) {
        return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
            .project;
    }
    /**
     * Parse the location from YumArtifact resource.
     *
     * @param {string} yumArtifactName
     *   A fully-qualified path representing YumArtifact resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromYumArtifactName(yumArtifactName) {
        return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
            .location;
    }
    /**
     * Parse the repository from YumArtifact resource.
     *
     * @param {string} yumArtifactName
     *   A fully-qualified path representing YumArtifact resource.
     * @returns {string} A string representing the repository.
     */
    matchRepositoryFromYumArtifactName(yumArtifactName) {
        return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
            .repository;
    }
    /**
     * Parse the yum_artifact from YumArtifact resource.
     *
     * @param {string} yumArtifactName
     *   A fully-qualified path representing YumArtifact resource.
     * @returns {string} A string representing the yum_artifact.
     */
    matchYumArtifactFromYumArtifactName(yumArtifactName) {
        return this.pathTemplates.yumArtifactPathTemplate.match(yumArtifactName)
            .yum_artifact;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.artifactRegistryStub && !this._terminated) {
            return this.artifactRegistryStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.ArtifactRegistryClient = ArtifactRegistryClient;
//# sourceMappingURL=artifact_registry_client.js.map