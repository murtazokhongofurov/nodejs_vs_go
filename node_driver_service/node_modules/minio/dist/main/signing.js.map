{"version":3,"sources":["signing.js"],"names":[],"mappings":"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","file":"signing.js","sourcesContent":["/*\n * Minio Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 Minio, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Moment from 'moment';\nimport Crypto from 'crypto';\nimport { uriEscape, getRegion, getScope } from './helpers.js';\n\nexport function signV4(request, dataShaSum256, accessKey, secretKey) {\n  if (!accessKey || !secretKey) {\n    return\n  }\n  var requestDate = Moment().utc()\n  if (!dataShaSum256) {\n    dataShaSum256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  }\n\n  if (!request.headers) {\n    request.headers = {}\n  }\n\n  var region = getRegion(request.host),\n    host = request.host\n\n  if ((request.protocol === 'http:' && request.port !== 80) || (request.protocol === 'https:' && request.port !== 443)) {\n    host = `${host}:${request.port}`\n  }\n\n  request.headers.host = host\n  request.headers['x-amz-date'] = requestDate.format('YYYYMMDDTHHmmss') + 'Z'\n  request.headers['x-amz-content-sha256'] = dataShaSum256\n\n  var canonicalRequestAndSignedHeaders = getCanonicalRequest(request, dataShaSum256),\n    canonicalRequest = canonicalRequestAndSignedHeaders[0],\n    signedHeaders = canonicalRequestAndSignedHeaders[1],\n    hash = Crypto.createHash('sha256')\n\n  hash.update(canonicalRequest)\n\n  var canonicalRequestHash = hash.digest('hex'),\n    stringToSign = getStringToSign(canonicalRequestHash, requestDate, region),\n    signingKey = getSigningKey(requestDate, region, secretKey),\n    hmac = Crypto.createHmac('sha256', signingKey)\n\n  hmac.update(stringToSign)\n\n  var signedRequest = hmac.digest('hex').toLowerCase().trim(),\n    scope = getScope(region, requestDate),\n    credentials = `${accessKey}/ ${scope}`,\n    authorization = `Credential=${credentials}, SignedHeaders=${signedHeaders}, Signature=${signedRequest}`\n\n  request.headers.authorization = 'AWS4-HMAC-SHA256 ' + authorization\n\n  function getCanonicalRequest(request, dataShaSum1) {\n    var headerKeys = [],\n      headers = [],\n      ignoredHeaders = ['Authorization', 'Content-Length', 'Content-Type', 'User-Agent']\n\n    // Excerpts from @lsegal - https://github.com/aws/aws-sdk-js/issues/659#issuecomment-120477258\n    //\n    //  User-Agent:\n    //\n    //      This is ignored from signing because signing this causes problems with generating pre-signed URLs\n    //      (that are executed by other agents) or when customers pass requests through proxies, which may\n    //      modify the user-agent.\n    //\n    //  Content-Length:\n    //\n    //      This is ignored from signing because generating a pre-signed URL should not provide a content-length\n    //      constraint, specifically when vending a S3 pre-signed PUT URL. The corollary to this is that when\n    //      sending regular requests (non-pre-signed), the signature contains a checksum of the body, which\n    //      implicitly validates the payload length (since changing the number of bytes would change the checksum)\n    //      and therefore this header is not valuable in the signature.\n    //\n    //  Content-Type:\n    //\n    //      Signing this header causes quite a number of problems in browser environments, where browsers\n    //      like to modify and normalize the content-type header in different ways. There is more information\n    //      on this in https://github.com/aws/aws-sdk-js/issues/244. Avoiding this field simplifies logic\n    //      and reduces the possibility of future bugs\n    //\n    //  Authorization:\n    //\n    //      Is skipped for obvious reasons\n\n    for (var header in request.headers) {\n      if (request.headers.hasOwnProperty(header) && ignoredHeaders.indexOf(header) === -1) {\n        var value = request.headers[header]\n        headers.push(`${header.toLowerCase()}:${value}`)\n        headerKeys.push(header.toLowerCase())\n      }\n    }\n\n    headers.sort()\n    headerKeys.sort()\n\n    var signedHeaders = ''\n    headerKeys.forEach(element => {\n      if (signedHeaders) {\n        signedHeaders += ';'\n      }\n      signedHeaders += element\n    })\n\n    var splitPath = request.path.split('?'),\n      requestResource = splitPath[0],\n      requestQuery = ''\n\n    if (splitPath.length === 2) {\n      requestQuery = splitPath[1]\n        .split('&')\n        .sort()\n        .map(element => {\n          if (element.indexOf('=') === -1) {\n            element = element + '='\n          }\n          return element\n        })\n        .join('&')\n    }\n\n    var canonicalString = ''\n    canonicalString += canonicalString + request.method.toUpperCase() + '\\n'\n    canonicalString += requestResource + '\\n'\n    canonicalString += requestQuery + '\\n'\n    headers.forEach(element => {\n      canonicalString += element + '\\n'\n    })\n    canonicalString += '\\n'\n    canonicalString += signedHeaders + '\\n'\n    canonicalString += dataShaSum1\n    return [canonicalString, signedHeaders]\n  }\n}\n\nexport function getSigningKey(date, region, secretKey) {\n  var dateLine = date.format('YYYYMMDD'),\n    hmac1 = Crypto.createHmac('sha256', 'AWS4' + secretKey).update(dateLine).digest('binary'),\n    hmac2 = Crypto.createHmac('sha256', hmac1).update(region).digest('binary'),\n    hmac3 = Crypto.createHmac('sha256', hmac2).update('s3').digest('binary')\n  return Crypto.createHmac('sha256', hmac3).update('aws4_request').digest('binary')\n}\n\nexport function getStringToSign(canonicalRequestHash, requestDate, region) {\n  var scope = getScope(region, requestDate)\n  var stringToSign = 'AWS4-HMAC-SHA256\\n'\n  stringToSign += requestDate.format('YYYYMMDDTHHmmss') + 'Z\\n'\n  stringToSign += `${scope}\\n`\n  stringToSign += canonicalRequestHash\n  return stringToSign\n}\n\nexport function postPresignSignatureV4(region, date, secretKey, policyBase64) {\n  var signingKey = getSigningKey(date, region, secretKey)\n  var hmac = Crypto.createHmac('sha256', signingKey)\n  hmac.update(policyBase64)\n  return hmac.digest('hex').toLowerCase().trim()\n}\n\nexport function presignSignatureV4(request, accessKey, secretKey) {\n  function getCanonicalRequest(request) {\n    var headerKeys = [],\n      headers = [],\n      ignoredHeaders = ['Authorization', 'Content-Length', 'Content-Type', 'User-Agent'],\n      expires = request.expires ? request.expires : \"604800\"\n\n    if (request.expires < 1) {\n      throw new Error('expires param cannot be less than 1 seconds')\n    }\n    if (request.expires > 604800) {\n      throw new Error('expires param cannot be larger than 7 days')\n    }\n\n    for (var header in request.headers) {\n      if (request.headers.hasOwnProperty(header) && ignoredHeaders.indexOf(header) === -1) {\n        var value = request.headers[header]\n        headers.push(`${header.toLowerCase()}:${value}`)\n        headerKeys.push(header.toLowerCase())\n      }\n    }\n\n    headers.sort()\n    headerKeys.sort()\n\n    var signedHeaders = ''\n    headerKeys.forEach(element => {\n      if (signedHeaders) {\n        signedHeaders += ';'\n      }\n      signedHeaders += element\n    })\n\n    var requestResource = request.path,\n      scope = getScope(region, requestDate),\n      credential = `${accessKey}/${scope}`,\n      authHeader = 'AWS4-HMAC-SHA256',\n      iso8601Date = requestDate.format('YYYYMMDDTHHmmss') + 'Z'\n\n    requestQuery = `X-Amz-Algorithm=${authHeader}&`\n    var escapedCredential = uriEscape(credential)\n    requestQuery += `X-Amz-Credential=${escapedCredential}&`\n    requestQuery += `X-Amz-Date=${iso8601Date}&`\n    requestQuery += `X-Amz-Expires=${expires}&`\n    var escapedSignedHeaders = uriEscape(signedHeaders)\n    requestQuery += `X-Amz-SignedHeaders=${escapedSignedHeaders}`\n\n    var canonicalString = ''\n    canonicalString += canonicalString + request.method.toUpperCase() + '\\n'\n    canonicalString += requestResource + '\\n'\n    canonicalString += requestQuery + '\\n'\n    headers.forEach(element => {\n      canonicalString += element + '\\n'\n    })\n    canonicalString += '\\n'\n    canonicalString += signedHeaders + '\\n'\n    canonicalString += 'UNSIGNED-PAYLOAD'\n    return canonicalString\n  }\n\n  if (!accessKey) {\n    throw new Error('accessKey is required for presigning')\n  }\n\n  if (!secretKey) {\n    throw new Error('secretKey is required for presigning')\n  }\n\n  var requestQuery = '',\n    region = getRegion(request.host),\n    host = request.host\n\n  if ((request.protocol === 'http' && request.port !== 80) || (request.protocol === 'https' && request.port !== 443)) {\n    host = `${host}:${request.port}`\n  }\n\n  if (!request.headers) {\n    request.headers = {}\n  }\n\n  request.headers.host = host\n\n  var requestDate = Moment().utc(),\n    canonicalRequest = getCanonicalRequest(request),\n    hash = Crypto.createHash('sha256')\n\n  hash.update(canonicalRequest)\n\n  var canonicalRequestHash = hash.digest('hex'),\n    stringToSign = getStringToSign(canonicalRequestHash, requestDate, region),\n    signingKey = getSigningKey(requestDate, region, secretKey),\n    hmac = Crypto.createHmac('sha256', signingKey)\n\n  hmac.update(stringToSign)\n\n  var signature = hmac.digest('hex').toLowerCase().trim(),\n    url = request.protocol + '//' + host + request.path,\n    presignedUrl = url + '?' + requestQuery + '&X-Amz-Signature=' + signature\n\n  return presignedUrl\n}\n"],"sourceRoot":"/source/"}