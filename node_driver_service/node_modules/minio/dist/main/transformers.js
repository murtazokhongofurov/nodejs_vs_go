'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getConcater = getConcater;
exports.getDummyTransformer = getDummyTransformer;
exports.getErrorTransformer = getErrorTransformer;
exports.getListBucketTransformer = getListBucketTransformer;
exports.getListMultipartTransformer = getListMultipartTransformer;
exports.getListPartsTransformer = getListPartsTransformer;
exports.getAclTransformer = getAclTransformer;
exports.getInitiateMultipartTransformer = getInitiateMultipartTransformer;
exports.getListObjectsTransformer = getListObjectsTransformer;
exports.getSizeVerifierTransformer = getSizeVerifierTransformer;
exports.getCompleteMultipartTransformer = getCompleteMultipartTransformer;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _xmlParsersJs = require('./xml-parsers.js');

var xmlParsers = _interopRequireWildcard(_xmlParsersJs);

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _through2 = require('through2');

var _through22 = _interopRequireDefault(_through2);

function getConcater() {
  var bufs = [];
  return (0, _through22['default'])(function (chunk, enc, cb) {
    bufs.push(chunk);
    cb();
  }, function (cb) {
    if (bufs.length) {
      this.push(Buffer.concat(bufs));
    }
    this.push(null);
    cb();
  });
}

function getDummyTransformer() {
  return _through22['default'].obj(function (chunk, enc, cb) {
    cb(null, chunk);
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getErrorTransformer(response, methodListBucket) {
  var requestid = response.headersSent ? response.getHeader('x-amz-request-id') : null;
  var statusCode = response.statusCode;
  var e = {};
  e.requestid = requestid;
  if (methodListBucket && statusCode === 307) {
    // ListBucket response sends 307 for unauthorized access
    statusCode = 403;
  }
  if (statusCode === 301) {
    e.code = 'MovedPermanently';
    e.message = 'Moved Permanently';
  } else if (statusCode === 307) {
    e.code = 'TemporaryRedirect';
    e.message = 'Are you using the correct endpoint URL?';
  } else if (statusCode === 403) {
    e.code = 'AccessDenied';
    e.message = 'Valid and authorized credentials required';
  } else if (statusCode === 404) {
    e.code = 'NotFound';
    e.message = 'Not Found';
  } else if (statusCode === 405) {
    e.code = 'MethodNotAllowed';
    e.message = 'Method Not Allowed';
  } else if (statusCode === 501) {
    e.code = 'MethodNotAllowed';
    e.message = 'Method Not Allowed';
  } else {
    e.code = 'UnknownError';
    e.message = '' + statusCode;
  }

  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    e = _.merge(e, xmlParsers.parseError(xmlbytes.toString()));
    cb();
  }, function (cb) {
    cb(e);
    this.push(null);
  });
}

function getListBucketTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    var _this = this;

    var buckets = xmlParsers.parseListBucket(xmlbytes.toString());
    buckets.forEach(function (bucket) {
      return _this.push(bucket);
    });
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getListMultipartTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    this.push(xmlParsers.parseListMultipart(xmlbytes.toString()));
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getListPartsTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    this.push(xmlParsers.parseListParts(xmlbytes.toString()));
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getAclTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    this.push(xmlParsers.parseAcl(xmlbytes.toString()));
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getInitiateMultipartTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    this.push(xmlParsers.parseInitiateMultipart(xmlbytes.toString()));
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getListObjectsTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    this.push(xmlParsers.parseListObjects(xmlbytes.toString()));
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}

function getSizeVerifierTransformer(size) {
  var totalSize = 0;
  // FIXME: cb should provide proper error object instead of string
  // string is being passed here to satisfy test cases for now
  return _through22['default'].obj(function (chunk, enc, cb) {
    totalSize += chunk.length;
    if (totalSize > size) {
      return cb('actual size does not match specified size');
    }
    this.push(chunk);
    cb();
  }, function (cb) {
    if (totalSize != size) {
      return cb('actual size does not match specified size');
    }
    this.push(null);
    cb();
  });
}

function getCompleteMultipartTransformer() {
  return _through22['default'].obj(function (xmlbytes, enc, cb) {
    this.push(xmlParsers.parseCompleteMultipart(xmlbytes.toString()));
    cb();
  }, function (cb) {
    this.push(null);
    cb();
  });
}
//# sourceMappingURL=transformers.js.map
