/*
 * Minio Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2015 Minio, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.parseError = parseError;
exports.parseListMultipart = parseListMultipart;
exports.parseListBucket = parseListBucket;
exports.parseAcl = parseAcl;
exports.parseListParts = parseListParts;
exports.parseInitiateMultipart = parseInitiateMultipart;
exports.parseCompleteMultipart = parseCompleteMultipart;
exports.parseListObjects = parseListObjects;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _concatStream = require('concat-stream');

var _concatStream2 = _interopRequireDefault(_concatStream);

var _xmlParser = require('xml-parser');

var _xmlParser2 = _interopRequireDefault(_xmlParser);

function parseError(xml) {
  var e = {};
  var parsedXml = (0, _xmlParser2['default'])(xml);
  if (typeof parsedXml.root !== 'undefined') {
    parsedXml.root.children.forEach(function (element) {
      if (element.name === 'Code') {
        e.code = element.content;
      } else if (element.name === 'Message') {
        e.message = element.content;
      } else if (element.name === 'RequestId') {
        e.requestid = element.content;
      } else if (element.name === 'Resource') {
        e.resource = element.content;
      } else if (element.name === 'HostId') {
        e.hostid = element.content;
      }
    });
  }
  return e;
}

function parseListMultipart(xml) {
  var parsedXml = (0, _xmlParser2['default'])(xml.toString()),
      result = {
    uploads: [],
    prefixes: [],
    isTruncated: false
  };
  parsedXml.root.children.forEach(function (element) {
    switch (element.name) {
      case 'IsTruncated':
        {
          result.isTruncated = element.content === 'true';
          break;
        }
      case 'NextKeyMarker':
        {
          result.nextKeyMarker = element.content;
          break;
        }
      case 'NextUploadIdMarker':
        {
          result.nextUploadIdMarker = element.content;
          break;
        }

      case 'CommonPrefixes':
        {
          // todo, this is the only known way for now to propagate delimited entries
          var prefix = {};
          element.children.forEach(function (xmlPrefix) {
            switch (xmlPrefix.name) {
              case 'Prefix':
                {
                  prefix.prefix = xmlPrefix.content;
                  break;
                }
            }
          });
          result.prefixes.push(prefix);
          break;
        }
      case 'Upload':
        {
          var upload = {};
          element.children.forEach(function (xmlObject) {
            switch (xmlObject.name) {
              case 'Key':
                {
                  upload.key = xmlObject.content;
                  break;
                }
              case 'UploadId':
                {
                  upload.uploadId = xmlObject.content;
                  break;
                }
              default:
            }
          });
          result.uploads.push(upload);
          break;
        }
      default:
    }
  });
  return result;
}

function parseListBucket(xml) {
  var result = [];
  var parsedXml = (0, _xmlParser2['default'])(xml);
  parsedXml.root.children.forEach(function (element) {
    if (element.name === 'Buckets') {
      element.children.forEach(function (bucketListing) {
        var bucket = {};
        bucketListing.children.forEach(function (prop) {
          switch (prop.name) {
            case 'Name':
              {
                bucket.name = prop.content;
                break;
              }
            case 'CreationDate':
              {
                bucket.creationDate = prop.content;
                break;
              }
          }
        });
        result.push(bucket);
      });
    }
  });
  return result;
}

function parseAcl(xml) {
  var parsedXml = (0, _xmlParser2['default'])(xml),
      publicRead = false,
      publicWrite = false,
      authenticatedRead = false,
      authenticatedWrite = false;

  var result = {
    owner: undefined,
    acl: []
  };

  parsedXml.root.children.forEach(function (element) {
    switch (element.name) {
      case 'Owner':
        {
          var ownerObj = {};
          element.children.forEach(function (element) {
            switch (element.name) {
              case 'ID':
                {
                  ownerObj.id = element.content;
                  break;
                }
              case 'DisplayName':
                {
                  ownerObj.displayName = element.content;
                  break;
                }
              default:
            }
          });
          result.owner = ownerObj;
          break;
        }
      case 'AccessControlList':
        {
          element.children.forEach(function (grant) {
            var granteeURL = null,
                permission = null;
            var grantObj = {
              grantee: undefined,
              permission: undefined
            };
            grant.children.forEach(function (grantChild) {
              switch (grantChild.name) {
                case 'Grantee':
                  {
                    var granteeObj = {};
                    grantChild.children.forEach(function (grantee) {
                      switch (grantee.name) {
                        case 'URI':
                          {
                            granteeURL = grantee.content;
                            granteeObj.uri = grantee.content;
                            break;
                          }
                        case 'ID':
                          {
                            granteeObj.id = grantee.content;
                            break;
                          }
                        case 'DisplayName':
                          {
                            granteeObj.displayName = grantee.content;
                            break;
                          }
                      }
                    });
                    grantObj.grantee = granteeObj;
                    break;
                  }
                case 'Permission':
                  {
                    permission = grantChild.content;
                    grantObj.permission = grantChild.content;
                    break;
                  }
              }
            });
            result.acl.push(grantObj);
          });
          break;
        }
    }
  });
  return result;
}

function parseListParts(xml) {
  var parsedXml = (0, _xmlParser2['default'])(xml);
  var result = {
    isTruncated: false,
    parts: [],
    marker: undefined
  };
  parsedXml.root.children.forEach(function (element) {
    switch (element.name) {
      case 'IsTruncated':
        result.isTruncated = element.content === 'true';
        break;
      case 'NextPartNumberMarker':
        result.marker = +element.content;
        break;
      case 'Part':
        var object = {};
        element.children.forEach(function (xmlObject) {
          switch (xmlObject.name) {
            case 'PartNumber':
              object.part = +xmlObject.content;
              break;
            case 'LastModified':
              object.lastModified = xmlObject.content;
              break;
            case 'ETag':
              object.etag = xmlObject.content.replace(/"/g, '').replace(/&quot;/g, '').replace(/&#34;/g, '');
              break;
            case 'Size':
              object.size = +xmlObject.content;
              break;
            default:
          }
        });
        result.parts.push(object);
        break;
      default:
        break;
    }
  });
  return result;
}

function parseInitiateMultipart(xml) {
  var parsedXml = (0, _xmlParser2['default'])(xml);
  var uploadId = null;
  parsedXml.root.children.forEach(function (element) {
    if (element.name === 'UploadId') {
      uploadId = element.content;
    }
  });
  return uploadId;
}

function parseCompleteMultipart(xml) {
  var parsedXml = (0, _xmlParser2['default'])(xml);
  var result = {};
  parsedXml.root.children.forEach(function (element) {
    switch (element.name) {
      case 'Location':
        {
          result.location = element.content;
          break;
        }
      case 'Key':
        {
          result.key = element.content;
          break;
        }
      case 'Bucket':
        {
          result.bucket = element.content;
          break;
        }
      case 'ETag':
        {
          result.etag = element.content.replace(/"/g, '').replace(/&quot;/g, '').replace(/&#34;/g, '');
          break;
        }
      default:
    }
  });
  return result;
}

function parseListObjects(xml) {
  var parsedXml = (0, _xmlParser2['default'])(xml);
  var result = {
    objects: [],
    nextMarker: null,
    isTruncated: false
  };
  var marker;
  parsedXml.root.children.forEach(function (element) {
    switch (element.name) {
      case 'IsTruncated':
        {
          result.isTruncated = element.content === 'true';
          break;
        }
      case 'NextMarker':
        {
          result.nextMarker = element.content;
          break;
        }
      case 'Contents':
        {
          var content = {};
          element.children.forEach(function (xmlObject) {
            switch (xmlObject.name) {
              case 'Key':
                {
                  content.name = xmlObject.content;
                  marker = content.name;
                  break;
                }
              case 'LastModified':
                {
                  content.lastModified = xmlObject.content;
                  break;
                }
              case 'Size':
                {
                  content.size = +xmlObject.content;
                  break;
                }
              case 'ETag':
                {
                  content.etag = xmlObject.content.replace(/"/g, '').replace(/&quot;/g, '').replace(/&#34;/g, '');
                  break;
                }
              default:
            }
          });
          result.objects.push(content);
          break;
        }
      case 'CommonPrefixes':
        {
          // todo, this is the only known way for now to propagate delimited entries
          var commonPrefixes = {};
          element.children.forEach(function (xmlPrefix) {
            switch (xmlPrefix.name) {
              case 'Prefix':
                {
                  commonPrefixes.name = xmlPrefix.content;
                  commonPrefixes.size = 0;
                  break;
                }
              default:
            }
          });
          result.objects.push(commonPrefixes);
          break;
        }
      default:
    }
  });
  if (result.isTruncated && !result.nextMarker) {
    result.nextMarker = marker;
  }
  return result;
}
//# sourceMappingURL=xml-parsers.js.map
